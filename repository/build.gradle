dependencies {
    compile project(':model')
    runtime 'com.h2database:h2:1.4.192'
    testCompile 'junit:junit:4.12'
}

test {
    reports.html.destination = file("$reports.html.destination/unit")
    reports.junitXml.destination = file("$reports.junitXml.destination/unit")
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integrationTest/java')
        resources.srcDir file('src/integrationTest/resources')
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath

    reports.html.destination = file("$reports.html.destination/integration")
    reports.junitXml.destination = file("$reports.junitXml.destination/integration")

    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/integrationTest.exec")
        classDumpFile = file("$buildDir/jacoco/classpathdumps")
    }
}

check.dependsOn integrationTest

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

task('jacocoIntegrationTestReport', type: JacocoReport) {
    executionData project.tasks.integrationTest
    sourceDirectories = project.files(project.sourceSets.integrationTest.allSource.srcDirs)
    classDirectories = project.sourceSets.integrationTest.output

    doLast {
        println "Jacoco report for client created: file://${reportsDir.toURI().path}"
    }
}

sonarRunner {
    sonarProperties {
        properties["sonar.tests"] += project.sourceSets.integrationTest.allSource.srcDirs
        property "sonar.jacoco.itReportPath", "$buildDir/jacoco/integrationTest.exec"
    }
}